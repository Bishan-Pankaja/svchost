-- Drop existing tables if they exist (optional, for re-creation)
DO $$ 
DECLARE
    i TEXT;
BEGIN
    FOR i IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(i) || ' CASCADE';
    END LOOP;
END $$;

-- Function: generate_random_key
CREATE OR REPLACE FUNCTION public.generate_random_key()
RETURNS TRIGGER AS $$
BEGIN
  NEW.key := gen_random_uuid()::TEXT;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Table: subscription_types
CREATE TABLE public.subscription_types (
  id UUID NOT NULL DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  description TEXT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT timezone('utc'::text, now()),
  is_active BOOLEAN NULL DEFAULT true,
  price NUMERIC NULL DEFAULT 0,
  CONSTRAINT subscription_types_pkey PRIMARY KEY (id),
  CONSTRAINT subscription_types_name_key UNIQUE (name)
) TABLESPACE pg_default;

-- Insert default subscription type
INSERT INTO public.subscription_types (name, description, price) 
VALUES ('default', 'Default subscription type', 0);

CREATE INDEX IF NOT EXISTS idx_subscription_types_name ON public.subscription_types USING btree (name) TABLESPACE pg_default;

-- Table: users
CREATE TABLE public.users (
  id serial not null,
  username text not null,
  password text not null,
  admin_approval boolean null default false,
  subscription text null,
  hwid text[] null,
  expiredate date null,
  key text null,
  hwid_reset_count integer null default 5,
  mobile_number text null,
  banned boolean null default false,
  save_hwid boolean null default true,
  max_devices integer null default 1,
  email text null,
  constraint users_pkey primary key (id),
  constraint fk_user_subscription foreign KEY (subscription) references subscription_types (name),
  constraint users_subscription_fkey foreign KEY (subscription) references subscription_types (name) on delete set null
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_users_username ON public.users USING btree (username) TABLESPACE pg_default;

CREATE TRIGGER tr_generate_key BEFORE INSERT on users for EACH row when (new.key is null)
EXECUTE FUNCTION generate_random_key ();

-- Table: api_keys
CREATE TABLE public.api_keys (
  id serial not null,
  user_id integer null,
  api_key character varying(255) not null,
  description character varying(255) null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  constraint api_keys_pkey primary key (id),
  constraint api_keys_api_key_key unique (api_key),
  constraint api_keys_user_id_fkey foreign KEY (user_id) references users (id)
) TABLESPACE pg_default;

-- Table: license_keys
CREATE TABLE public.license_keys (
  id serial not null,
  license_key text not null,
  admin_approval boolean null default false,
  subscription text null,
  hwid text[] null,
  expiredate date null,
  key text null,
  hwid_reset_count integer null default 5,
  mobile_number text null,
  banned boolean null default false,
  save_hwid boolean null default true,
  max_devices integer null default 1,
  email text null,
  constraint license_keys_pkey primary key (id),
  constraint license_keys_license_key_key unique (license_key),
  constraint fk_subscription foreign KEY (subscription) references subscription_types (name) on delete set null
) TABLESPACE pg_default;

CREATE INDEX IF not exists idx_license_keys on public.license_keys using btree (license_key) TABLESPACE pg_default;

-- Table: app_authentication_keys
CREATE TABLE public.app_authentication_keys (
  id uuid not null default gen_random_uuid (),
  name text not null,
  key text not null,
  description text null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  created_by uuid null,
  constraint app_authentication_keys_pkey primary key (id),
  constraint app_authentication_keys_key_key unique (key)
) TABLESPACE pg_default;

CREATE INDEX IF not exists idx_api_keys on public.app_authentication_keys using btree (key) TABLESPACE pg_default;

-- Table: applications_registry
CREATE TABLE public.applications_registry (
  id bigserial not null,
  name text not null,
  owner_id text not null,
  version text not null,
  app_secret text not null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint applications_registry_pkey primary key (id)
) TABLESPACE pg_default;

-- Table: api_requests
CREATE TABLE public.api_requests (
  id serial not null,
  api_key_id integer null,
  request_time timestamp with time zone null default now(),
  endpoint character varying(255) not null,
  request_body jsonb null,
  response_status integer null,
  response_body jsonb null,
  constraint api_requests_pkey primary key (id),
  constraint api_requests_api_key_id_fkey foreign KEY (api_key_id) references api_keys (id)
) TABLESPACE pg_default;

-- Table: app_open_details
CREATE TABLE public.app_open_details (
  id serial not null,
  user_id integer null,
  open_time timestamp with time zone null default now(),
  app_version character varying(50) null,
  os_version character varying(50) null,
  device_info jsonb null,
  constraint app_open_details_pkey primary key (id),
  constraint app_open_details_user_id_fkey foreign KEY (user_id) references users (id)
) TABLESPACE pg_default;

-- Table: application_open
CREATE TABLE public.application_open (
  id serial not null,
  username text null,
  ip_address text null,
  hwid text null,
  motherboard_serial text null,
  cpu_serial text null,
  os_version text null,
  ram_capacity text null,
  graphics_card text null,
  storage_capacity text null,
  pc_name text null,
  timestamp timestamp without time zone null default CURRENT_TIMESTAMP,
  constraint application_open_pkey primary key (id)
) TABLESPACE pg_default;

-- Table: login_details
CREATE TABLE public.login_details (
  id serial not null,
  username text not null,
  ip_address text null,
  hwid text null,
  motherboard_serial text null,
  cpu_serial text null,
  os_version text null,
  ram_capacity text null,
  graphics_card text null,
  storage_capacity text null,
  login_time timestamp without time zone null default now(),
  pc_name text null,
  constraint login_details_pkey primary key (id)
) TABLESPACE pg_default;

-- Table: login_logs
CREATE TABLE public.login_logs (
  id serial not null,
  username text not null,
  status text not null,
  timestamp timestamp without time zone null default now(),
  constraint login_logs_pkey primary key (id)
) TABLESPACE pg_default;

-- Table: logs
CREATE TABLE public.logs (
  id serial not null,
  log_level character varying(20) not null,
  message text not null,
  metadata jsonb null,
  created_at timestamp with time zone null default now(),
  constraint logs_pkey primary key (id)
) TABLESPACE pg_default;

-- Table: regz_cheat_status
CREATE TABLE public.regz_cheat_status (
  id serial not null,
  version text not null,
  website_url text not null,
  account_url text not null,
  safety_status text not null
) TABLESPACE pg_default;

-- Table: subscriptions
CREATE TABLE public.subscriptions (
  id serial not null,
  name character varying(100) not null,
  duration integer not null,
  price numeric(10, 2) not null,
  features jsonb null,
  created_at timestamp with time zone null default now(),
  constraint subscriptions_pkey primary key (id),
  constraint subscriptions_name_key unique (name)
) TABLESPACE pg_default;

-- Table: user_portal_auth
CREATE TABLE public.user_portal_auth (
  id serial not null,
  username text not null,
  password text not null,
  license_key text not null,
  created_at timestamp with time zone not null default now(),
  last_login timestamp with time zone null,
  constraint user_portal_auth_pkey primary key (id),
  constraint user_portal_auth_username_key unique (username),
  constraint user_portal_auth_license_key_fkey foreign KEY (license_key) references license_keys (license_key)
) TABLESPACE pg_default;

CREATE INDEX IF not exists user_portal_auth_username_idx on public.user_portal_auth using btree (username) TABLESPACE pg_default;
CREATE INDEX IF not exists user_portal_auth_license_key_idx on public.user_portal_auth using btree (license_key) TABLESPACE pg_default;

-- Table: user_portal_config
CREATE TABLE public.user_portal_config (
  id serial not null,
  username text not null,
  enabled boolean null default false,
  custom_path text not null,
  download_url text null,
  created_at timestamp with time zone null default now(),
  application_name text null,
  constraint user_portal_config_pkey primary key (id),
  constraint unique_username_path unique (username, custom_path)
) TABLESPACE pg_default;

CREATE INDEX IF not exists idx_user_portal_config_username on public.user_portal_config using btree (username) TABLESPACE pg_default;

-- Table: webhooks
CREATE TABLE public.webhooks (
  id serial not null,
  event_type character varying(100) not null,
  url character varying(255) not null,
  headers jsonb null,
  payload jsonb null,
  created_at timestamp with time zone null default now(),
  constraint webhooks_pkey primary key (id)
) TABLESPACE pg_default;

-- Table: app_version
CREATE TABLE public.app_version (
  id SERIAL NOT NULL,
  version TEXT NOT NULL,
  created_at TIMESTAMP WITHOUT TIME ZONE NULL DEFAULT now(),
  CONSTRAINT app_version_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Create the messages table
CREATE TABLE public.messages (
  id serial not null,
  type text not null,
  text text not null,
  constraint messages_pkey primary key (id),
  constraint messages_type_key unique (type)
) TABLESPACE pg_default;

-- Insert the sample data from the image
INSERT INTO public.messages (type, text) VALUES
  ('Inlet', 'type text'),
  ('login_success', 'Welcome.'),
  ('login', 'Please login to continue'),
  ('registration', 'EMPTY'),
  ('error', 'EMPTY'),
  ('welcome', 'Welcome to the dashboard!');

-- Create an index on the type column for faster lookups
CREATE INDEX idx_messages_type ON public.messages (type) TABLESPACE pg_default;

-- Insert default app version
INSERT INTO public.app_version (version) 
VALUES ('1.0');

CREATE TABLE IF NOT EXISTS messages (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  type TEXT NOT NULL UNIQUE,
  text TEXT NOT NULL,  -- Changed 'message' to 'text'
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Insert default messages if they don't exist
INSERT INTO messages (type, text)  -- Changed 'message' to 'text'
VALUES 
  ('login_success', 'You have successfully logged in!'),
  ('login_error', 'Login failed. Please check your credentials and try again.'),
  ('register_success', 'Registration successful! You can now log in.'),
  ('register_error', 'Registration failed. Please try again.'),
  ('password_reset', 'Password has been reset successfully.')
ON CONFLICT (type) DO NOTHING;